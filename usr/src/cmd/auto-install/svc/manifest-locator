#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2009, 2012, Oracle and/or its affiliates. All rights reserved.
#

# Use tee(1) when posting messages to both console and log file
TEE_LOGTOCONSOLE="/usr/bin/tee /dev/msglog"
# Architecture
ARCH=$(/sbin/uname -p)
# Installation configuration
INSTALL_CONF=/tmp/install.conf
SYSTEM_CONF=/etc/netboot/system.conf
WANBOOT_CONF=/etc/netboot/wanboot.conf

PRTCONF=/usr/sbin/prtconf
SED=/usr/bin/sed
AWK=/usr/bin/awk
CHMOD=/usr/bin/chmod
CUT=/usr/bin/cut
DEVPROP=/usr/sbin/devprop
FILE=/usr/bin/file
GREP=/usr/bin/grep
HEAD=/usr/bin/head
SVCADM=/usr/sbin/svcadm
SVCCFG=/usr/sbin/svccfg
WGET=/usr/bin/wget

DHCPINFO=/sbin/dhcpinfo
BOOTSERVER=BootSrvA
BOOTFILE=BootFile

# Auto Installer service fmri
AI_SMF_FMRI="svc:/application/auto-installer:default"
# Directory location for the AI manifest
AI_MANIFESTDIR=/var/ai
# Filename of the located AI manifest
AI_MANIFEST_FILE=${AI_MANIFESTDIR}/default.xml
# Location of the default AI manifest
# NOTE: VMC also uses this location to store a custom manifest for
# installation
AI_DEFAULT_MANIFEST=/.cdrom/auto_install/default.xml

# Directory location for profiles
PROFILE_DIR=/system/volatile/profile

# Service Discovery Engine
AISD_ENGINE=/usr/bin/ai_sd
# Service Choosing Engine
AISC_ENGINE=/usr/bin/ai_get_manifest
# Auto install manifest to be used for installation
AI_MANIFEST=/system/volatile/ai.xml
# List of services which Service Discovery Engine will
# contact for obtaining the manifest
AI_SERVICE_LIST_TMP=/system/volatile/service_list.$$
AI_SERVICE_LIST=/system/volatile/service_list
# debug mode
AI_DBGLVL=4
# timeout for service discovery process
AI_TIMEOUT=5

. /lib/svc/share/smf_include.sh

#
# Do multi-cast DNS service discovery in order
# to obtain installation manifests to use.
#
# Returns 0 for success and 1 for failure
#
do_service_discovery() 
{
	#
	# obtain parameters for service discovery provided in 
	# configuration files
	#  - name of service to look up
	#  - IP address and port number for fallback mechanism
	#  - turning on debug mode
	#
	# For SPARC, parameters are stored in 
	# /etc/netboot/system.conf
	# This file is downloaded as part of standard wanboot. If this
	# client's install server is from an older release, then fall back
	# to the original install.conf. Saved in /system/volatile.
	# 
	# For X86, parameters are in defined in GRUB menu.lst
	#
	# TODO: Unify the implementation - bug 7789
	# - define one common config file for both Sparc and x86
	#   and avoid using GRUB menu.lst
	#
	if [ "${ARCH}" = "sparc" ]; then
		config_file="$SYSTEM_CONF"
		if [[ ! -f "$config_file" ]]; then
			config_file="$INSTALL_CONF"
		fi
		AI_SERVICE_NAME=$($GREP "^install_service" \
			$config_file | $CUT -d'=' -f2)

		AI_SERVICE_ADDRESS=$($GREP "^install_svc_address" \
			$config_file | $CUT -d'=' -f2)
	else
		AI_SERVICE_NAME=$($DEVPROP -s install_service)

		AI_SERVICE_ADDRESS=$($DEVPROP -s install_svc_address)
	fi

	#
	# Check to see if AI_SERVICE_ADDRESS has the $serverIP keyword
	# If found, replace it with the AI server's IP address.
	#
	if [[ "$AI_SERVICE_ADDRESS" == ~(E)'^\$serverIP:' ]]; then
		if [ "${ARCH}" = "sparc" ]; then

			# SPARC clients extract the address of the AI server
			# from the root_server option in wanboot.conf, which
			# is in the following format:
			#
			#    root_server=http://<ai_server>:<port>/<path_to_wanboot-cgi>
			#
			# NOTE: the <ai_server> portion might be an IP address
			# or a hostname.  For the cases where it is a hostname,
			# the local /etc/hosts file would have already been
			# augmented with an entry to resolve that hostname.
			IPADDR=$($GREP "^root_server" $WANBOOT_CONF | \
				$CUT -d'=' -f2 | $CUT -d'/' -f3 | \
				$CUT -d':' -f1)
		else
			# PXE clients must query the DHCP server for the address
			IPADDR=$($DHCPINFO $BOOTSERVER)
		fi

		if [ -z "$IPADDR" ]; then
			print "Could not determine address of AI server" | \
				$TEE_LOGTOCONSOLE
			return 1
		fi

		AI_SERVICE_ADDRESS="${IPADDR}${AI_SERVICE_ADDRESS/\$serverIP/}"
	fi

	#
	# Invoke AI Service Discovery engine. For now it tries to look up
	# given service using multicast DNS.
	#

	if [ ! -x  $AISD_ENGINE ] ; then
		print "Could not find Auto Installer Service Discovery Engine" | \
		    $TEE_LOGTOCONSOLE
		return 1
	fi

	if [ -z "$AI_SERVICE_NAME" ] ; then
		print "Service name is required, but not provided" | \
		    $TEE_LOGTOCONSOLE
		return 1
	fi

	print "Service discovery phase initiated" | $TEE_LOGTOCONSOLE
	print "Service name to look up: $AI_SERVICE_NAME" | $TEE_LOGTOCONSOLE

	$AISD_ENGINE -n $AI_SERVICE_NAME -o $AI_SERVICE_LIST_TMP -t $AI_TIMEOUT \
	    -d $AI_DBGLVL

	#
	# if service discovery over multicast DNS failed, try fallback 
	# mechanism - service on given machine at given port number will be used
	#
	if [ $? -ne 0 ] ; then
		print "Service discovery over multicast DNS failed" | \
		    $TEE_LOGTOCONSOLE

		# if location of service is not provided, give up
		if [ -z "$AI_SERVICE_ADDRESS" ] ; then
			print "Location of service $AI_SERVICE_NAME not" \
			    "provided, service discovery failed" | \
			    $TEE_LOGTOCONSOLE
			return 1
		fi

		print "Service $AI_SERVICE_NAME located at $AI_SERVICE_ADDRESS" \
			"will be used" | $TEE_LOGTOCONSOLE
		print "$AI_SERVICE_ADDRESS:$AI_SERVICE_NAME" > \
			$AI_SERVICE_LIST_TMP
	fi

	print "Service discovery finished successfully" | $TEE_LOGTOCONSOLE

	#
	# Invoke AI Service choosing engine. It takes list of install
	# services to connect and tries to obtain valid manifest
	#

	if [ ! -x  $AISC_ENGINE ] ; then
		print "Could not find Auto Installer Service Choosing Engine" | \
		    $TEE_LOGTOCONSOLE
		return 1
	fi

	print "Process of obtaining install manifest initiated" | \
	    $TEE_LOGTOCONSOLE

	$AISC_ENGINE -s $AI_SERVICE_LIST_TMP -o $AI_MANIFEST -p $PROFILE_DIR \
		-d $AI_DBGLVL

	if [ $? -ne 0 ] ; then
		print "Could not obtain valid install manifest" | \
		    $TEE_LOGTOCONSOLE
		return 1
	fi

	# Save off the used copy of $AI_SERVICE_LIST_TMP
	cp $AI_SERVICE_LIST_TMP $AI_SERVICE_LIST

	$FILE $AI_MANIFEST | $GREP -q executable && $CHMOD +x $AI_MANIFEST
	return 0
}

#
# Invoke the prompt to specify a manifest
# location. Set up the terminal correctly
# before invoking the prompt
#
do_get_manifest()
{
	TERM=sun-color
	export TERM
	/usr/sbin/get_manifest $AI_MANIFESTDIR
	cp $AI_MANIFEST_FILE $AI_MANIFEST
	$FILE $AI_MANIFEST | $GREP -q executable && $CHMOD +x $AI_MANIFEST
}

#
# Set up the default manifest to be *the* 
# manifest to be used
#
setup_default_manifest()
{
	mkdir -p $AI_MANIFESTDIR
	cp $AI_DEFAULT_MANIFEST $AI_MANIFEST
	$FILE $AI_MANIFEST | $GREP -q executable && $CHMOD +x $AI_MANIFEST
}

#
# Process bootargs
#
if [ "${ARCH}" = "sparc" ]; then

	set -- ""
	set -- $($PRTCONF -vp | $GREP "bootargs" | $CUT -f 2 -d\')
	if [ $# -gt 0 ] ; then
		while [ $# -gt 0 ] ; do
			case $1 in

			install)
				INSTALL_FLAG="true"
				shift
				;;
			aimanifest*)
				case $(print $1 | $CUT -f 1 -d=) in
					aimanifest)
						AI_MANIFEST_LOCATION=$(print $1 | $CUT -f 2- -d=)
						;;
					*)
						;;
					esac
				shift
				;;
			install_debug*)
				if [ "$1" = "install_debug" ]; then
					INSTALL_DEBUG_MODE="enable"
				else
					case $(print $1 | $CUT -f 1 -d=) in
						install_debug)
							INSTALL_DEBUG_MODE=$(print $1 | $CUT -f 2 -d=)
							;;
						*)
							;;
					esac
				fi
				shift
				;;
			*)
				shift
				;;
			esac
		done
	fi

	# We check for the presence of the block device
	# /devices/ramdisk-bootfs:a in order to determine whether
	# we are booted off of the net for Sparc systems.
	if [ -b "/devices/ramdisk-bootfs:a" ]; then
		NETBOOT="true"
	else
		NETBOOT="false"
	fi
else
	INSTALL_FLAG=$($DEVPROP -s install)
	INSTALL_DEBUG_MODE=$($DEVPROP -s install_debug)
	AI_MANIFEST_LOCATION=$($DEVPROP -s aimanifest)
	INSTALL_MEDIA=$($DEVPROP -s install_media)

	#
	# We check for the existence of the install_media boot property
	# to determine whether we are booted off of the net for x86 systems.
	# We need to find a more reliable way to figure this out longer
	# term, as a boot property is always customizable by the user.
	#
	if [ ! -z "$INSTALL_MEDIA" ] ; then
		NETBOOT="true"
	else
		NETBOOT="false"
	fi
fi

# Set property on auto-installer service to let it know debug mode
# is requested.
if [ -n "$INSTALL_DEBUG_MODE" ] ; then
	print "Setting debug mode to $INSTALL_DEBUG_MODE" | \
	    $TEE_LOGTOCONSOLE

	$SVCCFG -s $AI_SMF_FMRI setprop general/install_debug = astring: \
		$INSTALL_DEBUG_MODE
	$SVCADM refresh $AI_SMF_FMRI
fi

#
# If the "install" bootarg is not specified, disable the auto-installer
# service so that console-login comes up.  (User should be able
# to login, and enable the auto-installer)
#
if [ "$INSTALL_FLAG" != "true" ]; then
	$SVCADM disable $AI_SMF_FMRI
	$SVCADM refresh $AI_SMF_FMRI
fi

#
# If the "prompt" bootarg is specified, prompt for the location of
# the manifest
#
if [ "$AI_MANIFEST_LOCATION" = "prompt" ]; then
	do_get_manifest </dev/console >/dev/console 2>&1
#
# if not default and something specified assume either local or remote file
# specified to be used as the manifest.
elif [ "$AI_MANIFEST_LOCATION" != "default" ] && \
     [ "$AI_MANIFEST_LOCATION" != "" ]; then
	case "$AI_MANIFEST_LOCATION" in
		http://*|ftp://*|tftp://*)
			# Use wget to retrieve remote manifest
			mkdir -p "$AI_MANIFESTDIR"
			if [[ $? -ne 0 ]]; then
				printf "\nFailed to create $AI_MANIFESTDIR. Exiting\n"
				exit $SMF_EXIT_ERR_FATAL
			fi
			$WGET "$AI_MANIFEST_LOCATION" -O "$AI_MANIFEST_FILE" >/dev/msglog 2>&1
			;;
		file://*)
			AI_MANIFEST_FILE="${AI_MANIFEST_LOCATION#*://}"
			;;
		*)
			AI_MANIFEST_FILE="$AI_MANIFEST_LOCATION"
			;;
	esac

	if [ -s "$AI_MANIFEST_FILE" ]; then
		cp "$AI_MANIFEST_FILE" "$AI_MANIFEST"
		$FILE "$AI_MANIFEST" | $GREP -q executable && $CHMOD +x "$AI_MANIFEST"
		print "Using specified install manifest : $AI_MANIFEST_LOCATION" | \
		    $TEE_LOGTOCONSOLE
	else
		print "Could not locate specified manifest : $AI_MANIFEST_LOCATION" | \
		    $TEE_LOGTOCONSOLE
		exit $SMF_EXIT_ERR_FATAL
	fi
#
# Else no "prompt" bootarg, and we're booted from media; use the
# default manifest on the media.
#
elif [ "$NETBOOT" = "false" ]; then
	setup_default_manifest
	print "Using the default install manifest for installation" | \
	    $TEE_LOGTOCONSOLE
#
# Else no "prompt" bootarg, and we're booted from network; do
# service discovery to get a manifest.
#
else
	do_service_discovery
	if [ $? -ne 0 ] ; then
		exit $SMF_EXIT_ERR_FATAL
	fi
	print "Using the install manifest obtained via service" \
	    "discovery" | $TEE_LOGTOCONSOLE
fi

#
# If the "install" bootarg is not specified, print a message to the user,
# so they know to enable the auto-installer
#
if [ "$INSTALL_FLAG" != "true" ]; then
	print "" | $TEE_LOGTOCONSOLE
	print "Auto-installer disabled. Enable the auto-installer service" | \
	    $TEE_LOGTOCONSOLE
	print "by running the following command:" | $TEE_LOGTOCONSOLE
        print "   svcadm enable $AI_SMF_FMRI" | $TEE_LOGTOCONSOLE
	print "" | $TEE_LOGTOCONSOLE
fi

exit $SMF_EXIT_OK
