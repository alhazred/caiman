<!--
    CDDL HEADER START
   
    The contents of this file are subject to the terms of the
    Common Development and Distribution License (the "License").
    You may not use this file except in compliance with the License.
   
    You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
    or http://www.opensolaris.org/os/licensing.
    See the License for the specific language governing permissions
    and limitations under the License.
   
    When distributing Covered Code, include this CDDL HEADER in each
    file and include the License file at usr/src/OPENSOLARIS.LICENSE.
    If applicable, add the following below this CDDL HEADER, with the
    fields enclosed by brackets "[]" replaced with your own identifying
    information: Portions Copyright [yyyy] [name of copyright owner]
   
    CDDL HEADER END
   
    Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
    Use is subject to license terms.

    XML specification for building a Virtual Machine image 
-->

<distribution name="OpenSolaris_VMC">
	<distro_constr_params>
		<!--
		     Where to build. This can be a zfs dataset or a mountpoint.
		     The area will be created if it doesn't exist. If the build_area
		     is not a zfs dataset or mountpoint, checkpointing will not
		     be enabled.
		-->
		<build_area>rpool/dc</build_area>
		<distro_constr_flags>
			<!--
			     Controls whether the DC should stop
			     if there is an error when the DC is running 
			-->
			<stop_on_error>true</stop_on_error>
			<!--
			     You can specify the step to resume the
			     build from here with the resume_from
			     attribute field of checkpoint_enable.
			     This value will be overridden by
			     the command line if the -r flag is used.
			     Valid values are step
			     numbers or name
			-->
			<checkpoint_enable>
				<!--
				     true implies Checkpointing is enabled
				-->
				true
			</checkpoint_enable>
		</distro_constr_flags>
		<output_image>
			<!--
			     List of finalizer scripts to be run. They are used
			     to customize the image and will be run in the
			     order listed. The name of the checkpoint to
			     be created when this script is run is required.
			     The checkpoint message is displayed when the
			     step is run and is optional.
			     There are 5 standard arguments that are passed to
			     every finalizer script (manifest socket, pkg_image path,
			     tmp dir, bootroot build area, media dir). You may also
			     specify additional arguments (arg6+) in the argslist.
			     This argslist is a whitespace-separated list of double
			     quoted strings.
			-->
			<finalizer>
				<script name="/usr/share/distro_const/vmc/prepare_ai_image">
					<checkpoint
						name="prepare-image"
						message="prepare bootable ai image"/>
					<argslist>
					<!--
					    Path to bootable AI image ISO
					-->
						"/export/home/name_of_bootable_ai_image"
					<!--
					    What AI client manifest to use for installation.
					    "default" will use the existing AI
					    client manifest included on the
					    AI media.  To use a custom AI
					    client manifest, provide a path
					    to your custom manifest
					-->
						"default"
					</argslist>
				</script>
				<script name="/usr/share/distro_const/vmc/create_vm">
					<checkpoint
						name="create-vm"
						message="create and configure virtual machine"/>
					<argslist>
						<!--
						virtual machine disk size
						Must be in range [12000, 99999999] (MB)"
						-->
						"16000"
						<!--
						virtual machine ram size
						Must be in range [1000, 16384] (MB)"
						-->
						"1536"
						<!--
						virtual machine type
						valid values are opensolaris
						for a 32-bit vm or
						opensolaris_64 for a 64-bit
						vm
						-->
						"opensolaris"
					</argslist>
				</script>
				<script name="/usr/share/distro_const/vmc/install_vm">
					<checkpoint
						name="install-vm"
						message="Boot and Install virtual machine"/>
				</script>
				<script name="/usr/share/distro_const/vmc/post_install_vm_config">
					<checkpoint
						name="post-config"
						message="Post installation virtual machine configuration"/>
					<argslist>
					<!--
					    virtual machine ram size
					    Must be in range [1000, 16384] (MB)"
					-->
					"1024"
					<!--
					    virtual machine number of cpus
					    Must be in range [1,32]"
					-->
					"1"
					<!--
					    virtual machine VT-x/AMD-V support
					    valid options are on or off
					-->
					"on"
					</argslist>
				</script>
				<script name="/usr/share/distro_const/vmc/export_esx">
					<checkpoint
						name="export-esx"
						message="Export virtual machine for VMWare ESX"/>
					<argslist>
					<!--
					    Export Format, valid options are ovf or esx
					    For this checkpoint esx is required.
					-->
						"esx"
					</argslist>
				</script>
				<script name="/usr/share/distro_const/vmc/export_ovf">
					<checkpoint
						name="export-ovf"
						message="Export virtual machine in OVF format"/>
					<argslist>
					<!--
					    Export Format, valid options are ovf or esx
					    For this checkpoint ovf is required.
					-->
						"ovf"
					</argslist>
				</script>
			</finalizer>
		</output_image>
	</distro_constr_params>
	<!--
		Currently, vmimg_params contains no data.  It's merely used
		to differentiate manifests which create media images from
		those that don't.
	-->
	<vmimg_params>
	</vmimg_params>
</distribution>
