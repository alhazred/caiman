#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

# Make sure that the libraries essential to this stage of booting can be found.
LD_LIBRARY_PATH=/lib; export LD_LIBRARY_PATH

AUTOINSTALL=0

PRTCONF=/usr/sbin/prtconf
SED=/usr/bin/sed
CUT=/usr/bin/cut
GREP=/usr/bin/grep
MKDIR=/usr/bin/mkdir
WGET=/usr/bin/wget
MOUNT=/sbin/mount
TMPFS_MOUNT=/usr/lib/fs/tmpfs/mount

# Sparc installation configuration
INSTALL_CONF_FILE="install.conf"
INSTALL_CONF_SPEC="/tmp/$INSTALL_CONF_FILE"
NETBOOT="/etc/netboot"
WANBOOT_CONF="$NETBOOT/wanboot.conf"

# compressed archives
SOLARIS_ZLIB="solaris.zlib"
SOLARISMISC_ZLIB="solarismisc.zlib"

#
# Exit with SMF_EXIT_OK if not invoked in an Automated Installer
# environment
#
if [ ! -f /.autoinstall ] ; then
	exit $SMF_EXIT_OK
fi

. /lib/svc/share/live_fs_include.sh
. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh

ISA_INFO=`/sbin/uname -p`

echo "Preparing automated install image for use" > /dev/msglog

# Prime the network
/sbin/dhcpagent -a

#
# For SPARC mount wanbootfs which contains wanboot.conf file
# associated with this client. root_file option defined there
# points to the boot archive and has following format:
# root_file=<ai_image>/boot/platform/sun4v/boot_archive
# We need to extract <ai_image> part, since this is the
# location of solaris*.zlib archives.
#
# For X86, get the install media from the menu.lst 
#
if [ "$ISA_INFO" = "sparc" ]; then
	# check if wanboot provided wanbootfs
	BOOTFS_DISK="/devices/ramdisk-bootfs:a"

	# create mountpoint for wanbootfs
	$MKDIR "$NETBOOT"

	if [ $? -ne 0 ] ; then
		echo "Couldn't create $NETBOOT directory" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	# mount wanbootfs which is hsfs(7FS) filesystem
	$MOUNT -F hsfs -o ro "$BOOTFS_DISK" "$NETBOOT" > \
	    /dev/msglog 2>&1

	if [ $? -ne 0 ] ; then
		echo "Couldn't mount wanbootfs filesystem" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	# check, if wanboot.conf is present
	if [ ! -f $WANBOOT_CONF ] ; then
		echo "$WANBOOT_CONF file not found" > /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	# extract path to directory containing AI image
	ai_image_dir=`$GREP "^root_file" $WANBOOT_CONF |
	    $CUT -d '=' -f 2 | $SED -e s-boot/platform/sun4v/boot_archive--`

	if [ -z "$ai_image_dir" ] ; then
		echo "Couldn't obtain location of AI image" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	echo "The AI image will be retrieved from $ai_image_dir" \
	    "directory" > /dev/msglog

	#
	# extract address of AI server from root_server option
	# It is in following format:
	# root_server=http://<ai_server>:<port>/<path_to_wanboot-cgi>
	#
	ai_server=`$GREP "^root_server" $WANBOOT_CONF |
	    $CUT -d '=' -f 2 | $CUT -d '/' -f 1-3`

	if [ -z "$ai_server" ] ; then
		echo "Couldn't obtain address of AI server" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	MEDIA="$ai_server$ai_image_dir"
else
	# Get the install media data to use in http url
	MEDIA=`$PRTCONF -v /devices | \
	    $SED -n '/install_media/{;n;p;}' | \
	    $CUT -f 2 -d \'`

fi

#
# Translate to valid url - it is dummy operation for now
# since it is assumed that complete and valid URL was provided
#
url=$MEDIA
if [ -z "$url" ]
then
	echo "Couldn't determine source of automated install image" > \
	    /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

# Mount /tmp to download files
$TMPFS_MOUNT swap /tmp
if [ $? -ne 0 ]
then
	echo "Mounting swap FAILED!" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

# Download compressed '/usr' and store to tmp
echo "Downloading $SOLARIS_ZLIB archive" > /dev/msglog
usr_fs="$url/$SOLARIS_ZLIB"
$WGET $usr_fs -O /tmp/$SOLARIS_ZLIB > \
    /dev/msglog 2> /dev/msglog
if [ $? -ne 0 ]
then
	echo "Could not obtain $usr_fs archive from install" \
	    "server" > /dev/msglog
	echo "Please verify that the install server is correctly" \
	    "configured and reachable from the client" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

# Download rest of AI net image and store to tmp
echo "Downloading $SOLARISMISC_ZLIB archive" > /dev/msglog
misc_fs="$url/$SOLARISMISC_ZLIB"
$WGET $misc_fs -O /tmp/$SOLARISMISC_ZLIB > \
    /dev/msglog 2> /dev/msglog
if [ $? -ne 0 ]
then
	echo "Could not obtain $misc_fs archive from" \
	    "install server" > /dev/msglog
	echo "Please verify that the install server is correctly" \
	    "configured and reachable from the client" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

# download the install.conf file to get the service name for SPARC
if [ "$ISA_INFO" = "sparc" ]; then
	install_conf="$url/$INSTALL_CONF_FILE"
	$WGET $install_conf -O $INSTALL_CONF_SPEC > \
	    /dev/msglog 2> /dev/msglog
	if [ $? -ne 0 ]; then
		echo "Could not obtain $install_conf file from" \
		    "the install server" > /dev/msglog
		echo "Please verify that the install server is" \
		    "correctly configured and reachable from" \
		    "the client" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi
fi

# download the .image_info file for x86
if [ "$ISA_INFO" != "sparc" ]; then
	img_info="$url/.image_info"
	$WGET $img_info -O /tmp/.image_info > \
	    /dev/msglog 2> /dev/msglog
	if [ $? -ne 0 ]; then
		echo "Could not obtain $img_info file from the" \
		    "install server" > /dev/msglog
		echo "Please verify that the install server is" \
		    "correctly configured and reachable from" \
		    "the client" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi
fi

# Lofi mount downloaded archives to /usr and /mnt/misc respectively

#
# Can not mount solaris.zlib using just the mount command,
# because the mount command enforces nosetuid, and /usr
# needs to have the setuid capability.
#
usr_lofi_dev=`/usr/sbin/lofiadm -a /tmp/$SOLARIS_ZLIB`
if [ $? -ne 0 -o -z "$usr_lofi_dev" ]
then
	echo "Couldn't lofi mount /usr filesystem" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

$MOUNT -F hsfs -o ro $usr_lofi_dev /usr
if [ $? -ne 0 ]
then
	echo "Couldn't mount /usr filesystem" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

#
# As setting 'nosuid' is acceptable for /mnt/misc filesystem,
# we can take advantage of mounting that file directly and
# skipping explicit lofi mount step required for /usr
#
$MOUNT -F hsfs /tmp/$SOLARISMISC_ZLIB /mnt/misc
if [ $? -ne 0 ]
then
	echo "Couldn't mount /mnt/misc" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi
echo "Done mounting automated install image" > /dev/msglog

#
# set keyboard layout to 'US-English'
# This is just an interim solution.
# For long term, keyboard layout will be defined
# in AI manifest and set in ICT phase
#
/usr/bin/kbd -s US-English

#
# If requested, enable remote access via ssh
#
if [ $ISA_INFO = "sparc" ] ; then
	AI_ENABLE_SSH=`$GREP "^livessh" $INSTALL_CONF_SPEC |
	    $CUT -d'=' -f2`
else
	AI_ENABLE_SSH=`$PRTCONF -v /devices|$SED -n '/livessh/{;n;p;}' |
	    $CUT -f 2 -d\'`
fi

if [ "$AI_ENABLE_SSH" = "enable" ]; then
	# generate ssh keys
	/lib/svc/method/sshd -c

	# enabled ssh server
	/usr/sbin/svcadm enable network/ssh
fi

#
# Also mount /boot now so that things like keymap.sh can access
# boot properties through eeprom.  Readonly isn't required because
# /boot (and other pcfs filesystems) aren't fsck'ed at boot yet.
# Also, we don't account for caching /boot as it must be on a local
# disk.  So what's in vfstab is fine as it stands; just look to see
# if it's there and avoid the mount if not.
#
readvfstab "/boot" < $vfstab

if [ -n "$mountp" ]; then
	mountfs - /boot $fstype $mntopts - || exit $SMF_EXIT_ERR_FATAL
fi

#
# Update kernel driver.conf cache with any additional driver.conf
# files found on /usr, and device permissions from /etc/minor_perm.
#
/usr/sbin/devfsadm -I -P

[ -f /etc/.dynamic_routing ] && /usr/bin/rm -f /etc/.dynamic_routing

libc_mount

# 
# Discover architecture and find and mount optimal libc_psr 
#  
PLAT=`/usr/bin/uname -i` 
ARCH=`/usr/bin/uname -m` 
if [ "$ARCH" = "sun4v" ]; then 
	sun4v_libc_psr_mount 
elif [ "$ARCH" = "sun4u" ]; then 
	if [ -h /platform/$PLAT/lib/libc_psr.so.1 ]; then 
		LINKSTO=`/usr/bin/ls -l /platform/$PLAT/lib/libc_psr.so.1 | 
			/usr/bin/awk '{print $NF}'` 
		if [ "$LINKSTO" = "../../sun4u-us3/lib/libc_psr.so.1" ]; then 
			ARCH=sun4u-us3 
		fi
	fi
	sun4u_libc_psr_mount 
fi

#
# All SMF services are imported and sevice profiles are applied to the
# boot archive during image construction time.  However, the link
# for the platform.xml service profile is not created because
# we are unable to determine the platform on which the image will
# be booted on during build time.
#
# The link for platform.xml file must be created during boot time
# depending on platform type.
#
apply_platform_profile

/usr/bin/rm -f /etc/svc/repository-boot*

# Mount opt
/usr/sbin/mount -F lofs /mnt/misc/opt /opt

update_linker_cache

exit 0
